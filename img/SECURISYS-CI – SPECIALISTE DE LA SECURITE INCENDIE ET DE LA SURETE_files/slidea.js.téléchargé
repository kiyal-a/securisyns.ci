

// Variables globales

let compteur = 0; // Compteur qui permet de connaître l'image sur laquelle on se trouve
let timer, elements, slides, slideWidth, speed, transition;

window.onload = () => {
    // On récupère le diaporama
    const diapo = document.querySelector(".diapo");
    // On récupère le data-speed
    speed = diapo.dataset.speed;
    transition = diapo.dataset.transition;

    elements = document.querySelector(".elements");

    // On clone la 1ère image
    let firstImage = elements.firstElementChild.cloneNode(true);

    // On injecte le clone à la fin du diapo
    elements.appendChild(firstImage);

    slides = Array.from(elements.children);

    // On récupère la largeur d'une slide
    slideWidth = diapo.getBoundingClientRect().width;

    // On récupère les flèches
    let next = document.querySelector("#nav-droite");
    let prev = document.querySelector("#nav-gauche");

    // On gère le clic
    next.addEventListener("click", slideNext);
    prev.addEventListener("click", slidePrev);

    // On automatise le défilement
    timer = setInterval(slideNext, speed);

    // On gère l'arrêt et la reprise
    diapo.addEventListener("mouseover", stopTimer);
    diapo.addEventListener("mouseout", startTimer);
}

/**
 * Cette fonction fait défiler le diaporama vers la droite
 */
function slideNext(){
    // On incrémente le compteur
    compteur++;
    elements.style.transition = transition+"ms linear";

    let decal = -slideWidth * compteur;
    elements.style.transform = `translateX(${decal}px)`;

    // On attend la fin de la transition et on "rembobine" de façon cachée
    setTimeout(function(){
        if(compteur >= slides.length - 1){
            compteur = 0;
            elements.style.transition = "unset";
            elements.style.transform = "translateX(0)";
        }
    }, transition);
}

/**
 * Cette fonction fait défiler le diaporama vers la gauche
 */
function slidePrev(){
    // On décrémente le compteur
    compteur--;
    elements.style.transition = transition+"ms linear";

    if(compteur < 0){
        compteur = slides.length - 1;
        let decal = -slideWidth * compteur;
        elements.style.transition = "unset";
        elements.style.transform = `translateX(${decal}px)`;
        setTimeout(slidePrev, 1);
    }

    let decal = -slideWidth * compteur;
    elements.style.transform = `translateX(${decal}px)`;
    
}

function stopTimer(){
    clearInterval(timer);
}

function startTimer(){
    timer = setInterval(slideNext, speed);
}




// js produit en slider

let img__slider = document.getElementsByClassName('img__slider');

let etape = 0;

let nbr__img = img__slider.length;

let precedent = document.querySelector("#precedent");
let suivant = document.querySelector("#suivant");

function enleverActiveImages() {
    for(let i = 0 ; i < nbr__img ; i++) {
        img__slider[i].classList.remove('active');
    }
}

suivant.addEventListener('click', function() {
    etape++;
    if(etape >= nbr__img) {
        etape = 0;
    }
    enleverActiveImages();
    img__slider[etape].classList.add('active');
})

precedent.addEventListener('click', function() {
    etape--;
    if(etape < 0) {
        etape = nbr__img - 1;
    }
    enleverActiveImages();
    img__slider[etape].classList.add('active');
})

setInterval(function() {
    etape++;
    if(etape >= nbr__img) {
        etape = 0;
    }
    enleverActiveImages();
    img__slider[etape].classList.add('active');
}, 3000)



document.addEventListener("DOMContentLoaded", () => {
    // Sélectionner tous les éléments de menu avec des sous-menus
    const menuItems = document.querySelectorAll(".menu-item > a");

    menuItems.forEach(link => {
        link.addEventListener("click", (event) => {
            const parentItem = link.parentElement;
            const submenu = parentItem.querySelector("ul");

            if (submenu) {
                event.preventDefault(); // Empêcher la navigation du lien
                const isVisible = submenu.classList.contains("show");

                // Fermer tous les sous-menus
                document.querySelectorAll(".menu-item ul.show").forEach(openSubmenu => {
                    openSubmenu.classList.remove("show");
                });

                // Ouvrir le sous-menu actuel si ce n'était pas déjà visible
                if (!isVisible) {
                    submenu.classList.add("show");
                }
            }
        });
    });

    // Fermer les sous-menus en cliquant ailleurs
    document.addEventListener("click", (event) => {
        if (!event.target.closest(".menu-item")) {
            document.querySelectorAll(".menu-item ul.show").forEach(openSubmenu => {
                openSubmenu.classList.remove("show");
            });
        }
    });
});








/*
document.addEventListener("DOMContentLoaded", () => {
    // Sélectionner tous les éléments de menu avec des sous-menus
    const menuItems = document.querySelectorAll(".menu-item");

    menuItems.forEach(item => {
        item.addEventListener("click", (event) => {
            event.preventDefault(); // Empêcher le comportement par défaut

            // Obtenir le sous-menu associé
            const submenu = item.nextElementSibling;

            // Fermer les autres sous-menus ouverts
            document.querySelectorAll(".menu-item").forEach(menu => {
                if (menu !== submenu) {
                    menu.classList.remove("show");
                }
            });

            // Basculer l'affichage du sous-menu actuel
            if (submenu) {
                submenu.classList.toggle("show");
            }
        });
    });

    // Fermer les sous-menus en cliquant ailleurs
    document.addEventListener("click", (event) => {
        if (!event.target.closest(".menu-item")) {
            document.querySelectorAll(".menu-item").forEach(menu => {
                menu.classList.remove("show");
            });
        }
    });
});

*/